#!/usr/bin/env bash

# We have no need for filename expansion / globbing,
# so we'll disable it here.
# We'll take advantage of the safety this confers when doing something like:
#
#   confg_args=(--some arg $USER_EXTRA_ARGS)
#
# Without set -f, $USER_EXTRA_ARGS can be subject to any glob patterns therein!
set -f

# fail-fast
set -euo pipefail

install_luaJIT() {
  local install_type=$1
  local raw_version=$2
  local install_path=$3
  local luaJIT_version=$raw_version
  local lua_rocks_version
  lua_rocks_version="${LUAROCKS_VERSION:-$(get_latest_luarocks_version)}"

  local tmp_download_dir
  if [[ "${TMPDIR-}" == "" ]]; then
    tmp_download_dir=$(mktemp -d)
  else
    tmp_download_dir=$TMPDIR
  fi

  # canonicalize the path.
  # this has several benefits:
  #  1. if the luajit/luarocks build-systems also does this (hint: they do),
  #     then the path we use here will be guaranteed to be identical.
  #  2. this removes silly stuff like //, /./ throughout the path,
  #     and removes a trailing slash (e.g. macOS's $TMPDIR).
  tmp_download_dir=$(realpath -- "$tmp_download_dir")

  local luaJIT_source_path
  luaJIT_source_path=$(get_luaJIT_download_file_path "$install_type" "$luaJIT_version" "$tmp_download_dir")
  local lua_rocks_source_path
  lua_rocks_source_path=$(get_lua_rocks_download_file_path "$install_type" "$lua_rocks_version" "$tmp_download_dir")
  download_luaJIT_source "$install_type" "$luaJIT_version" "$luaJIT_source_path"
  download_lua_rocks_source "$install_type" "$lua_rocks_version" "$lua_rocks_source_path"

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    local line

    cd "${luaJIT_source_path}" || exit 1

    local luaJIT_configure_options=()
    while IFS='' read -r line; do
      luaJIT_configure_options+=("$line")
    done < <(construct_luaJIT_configure_options)

    # set in os_based_configure_options
    # we unset it here because echo-ing changes the return value of the function
    unset ASDF_PKG_MISSING

    if [[ "$OSTYPE" = "darwin"* ]] && [[ -z "${MACOSX_DEPLOYMENT_TARGET-}" ]]; then
      MACOSX_DEPLOYMENT_TARGET=$(/usr/bin/sw_vers --productVersion)
      export MACOSX_DEPLOYMENT_TARGET
    fi

    printf "Building luaJIT with options:"
    printf " %q" "${luaJIT_configure_options[@]}"
    printf "\n"
    make amalg "${luaJIT_configure_options[@]}" || exit 1
    make install "${luaJIT_configure_options[@]}" || exit 1

    # luajit beta versions do not symlink luajit to the built binary,
    # so we'll do that manually here, for convenience and also so
    # luarocks can install.
    if [[ $luaJIT_version == *"beta"* ]]; then
      ln -sf luajit-"$luaJIT_version" "$ASDF_INSTALL_PATH"/bin/luajit
    fi

    ##########################################################################

    cd "$(dirname "$lua_rocks_source_path")" || exit 1
    local source_dir
    source_dir=$(untar_lua_rocks_path "$install_type" "$lua_rocks_version" "$tmp_download_dir")
    tar zxf "$lua_rocks_source_path" || exit 1
    cd "$source_dir"

    local lua_rocks_configure_options=()
    while IFS='' read -r line; do
      lua_rocks_configure_options+=("$line")
    done < <(construct_lua_rocks_configure_options)

    # set in os_based_configure_options
    # we unset it here because echo-ing changes the return value of the function
    unset ASDF_PKG_MISSING

    printf "Building luarocks with options:"
    printf " %q" "${lua_rocks_configure_options[@]}"
    printf "\n"

    cd "$install_path/bin"

    echo "Creating luajit symlink (using find)..."
    luajit_file=$(find . -name "luajit-*" -type f -executable | head -n1 | sed 's|^\./||')
    if [ -n "$luajit_file" ]; then
        ln -sf "$luajit_file" luajit
        echo "SUCCESS: Created symlink luajit -> $luajit_file"
    else
        echo "ERROR: No luajit binary found"
        exit 1
    fi
    
    cd "$source_dir"
    ./configure "${lua_rocks_configure_options[@]}" || exit 1
    make bootstrap || exit 1

    # the install leaves some references to the build dir; remove them:
    local file
    for file in "$ASDF_INSTALL_PATH"/bin/{luarocks,luarocks-admin}; do
      # this is the path entry that we want to remove
      local pattern="${source_dir}/src/?.lua;"
      local replacement=""
      local contents
      IFS='' read -r -d '' contents <"$file" || true
      truncate -c -s 0 "$file"
      printf "%s" "${contents//$pattern/$replacement}" >>"$file"
    done
  )
}

construct_luaJIT_configure_options() {
  local configure_options=()
  if [[ "${LUAJIT_CONFIGURE_OPTIONS-}" == "" ]]; then
    # we want typical IFS splitting here,
    # and we've set -f earlier, so this is fine.
    # shellcheck disable=SC2206
    configure_options=(
      PREFIX="$install_path"
      ${LUAJIT_EXTRA_CONFIGURE_OPTIONS-}
    )
  else
    # shellcheck disable=SC2206
    configure_options=(
      ${LUAJIT_CONFIGURE_OPTIONS-}
      PREFIX="$install_path"
    )
  fi

  printf "%s\n" "${configure_options[@]}"
}

construct_lua_rocks_configure_options() {
  if [[ "${LUAROCKS_CONFIGURE_OPTIONS-}" == "" ]]; then
    local luaJIT_include_path
    if [[ "$OSTYPE" = "darwin"* ]] && [[ -z "${MACOSX_DEPLOYMENT_TARGET-}" ]]; then
      luaJIT_include_path="$(find "$install_path"/include -depth 1)"
    else
      luaJIT_include_path="$(find "$install_path"/include -mindepth 1 -maxdepth 1)"
    fi
    local configure_options=(
      --prefix="$install_path"
      --lua-suffix="jit"
      --with-lua="$install_path"
      --with-lua-include="$luaJIT_include_path"
      --with-lua-lib="$install_path/lib"
    )
    # shellcheck disable=SC2206
    configure_options+=(
      ${LUAROCKS_EXTRA_CONFIGURE_OPTIONS-}
    )
  else
    # shellcheck disable=SC2206
    local configure_options=(
      ${LUAROCKS_CONFIGURE_OPTIONS-}
    )

    configure_options+=("PREFIX=$install_path")
  fi

  printf "%s\n" "${configure_options[@]}"
}

untar_lua_rocks_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  echo "$tmp_download_dir/luarocks-${version}"
}

download_luaJIT_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url
  download_url=$(get_luaJIT_download_url)
  local git_ref="$version"
  if [ "$install_type" = "version" ]; then
    git_ref="v$git_ref"
  fi

  if ! [[ -d "$download_path" ]]; then
    echo clone luajit from "${download_url}" into "${download_path}"
    if [ "$install_type" = "version" ]; then
      git clone --branch="$git_ref" "$download_url" "$download_path"
    else
      git clone "$download_url" "$download_path"
      git -C "$download_path" "checkout" "$git_ref"
    fi
  else
    if [[ $(git -C "$download_path" remote get-url origin) != $(get_luaJIT_download_url) ]]; then
      echo "download directory already exists, but does not look like a usable clone" 1>&2
      echo "download directory: ${download_path}" 1>&2
      exit 1
    fi
    # clean up the directory, and make sure we're on the right branch/tag
    git -C "$download_path" fetch
    git -C "$download_path" clean -d -x -f
    git -C "$download_path" reset --hard
    git -C "$download_path" checkout "$git_ref"
  fi
}

download_lua_rocks_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url
  download_url=$(get_lua_rocks_download_url "$install_type" "$version")

  curl -Lo "$download_path" -C - "$download_url"
}

get_luaJIT_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="LuaJIT-${version}"

  echo "$tmp_download_dir/$pkg_name"
}

get_lua_rocks_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="luarocks-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}

get_luaJIT_download_url() {
  echo "https://luajit.org/git/luajit.git"
}

get_lua_rocks_download_url() {
  local install_type=$1
  local version=$2
  echo "https://luarocks.github.io/luarocks/releases/luarocks-${version}.tar.gz"
}

get_latest_luarocks_version() {
  local curl_opts=(-fsSL)
  if [[ -n "${GITHUB_API_TOKEN:-}" ]]; then
    curl_opts=("${curl_opts[@]}" -H "Authorization: token ${GITHUB_API_TOKEN}")
  fi
  curl "${curl_opts[@]}" "https://api.github.com/repos/luarocks/luarocks/tags?per_page=1&page=1" |
    grep '"name"' | cut -d\" -f4 | cut -c2-
}

install_luaJIT "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
